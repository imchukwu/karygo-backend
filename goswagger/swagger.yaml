openapi: 3.0.3
info:
  title: Karygo APIs Documentation
  description: |-
    Current consumable APIs for Karygo developers

    Some useful tips:
    - Ensure you change the Base Url to [localhost](http://localhost:8000) for local testing
    - Documentation is done in YAML file
    - The Base Url used for this documentation is [here](https://karygo.herokuapp.com)
  version: 1.0.0
servers:
  - url: https://karygo.herokuapp.com
  - url: http://localhost:8000
tags:
  - name: Contact
    description: Contact endpoints
  - name: Items
    description: Items endpoints
  - name: User
    description: Operations about user
  - name: Trip
    description: Trips endpoints
  - name: Admin
    description: Admin endpoints
paths:
  /contact/{contactId}:
    put:
      tags:
        - Contact
      summary: Update an existing contact
      description: Update existing contact by Id
      operationId: updateContact
      parameters:
        - name: contactId
          in: path
          description: contactId to be updated
          required: true
          explode: true
          schema:
            type: integer

      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
          application/xml:
            schema:
              $ref: "#/components/schemas/Contact"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Contact"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
            application/xml:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    get:
      tags:
        - Contact
      summary: Update an existing contact
      description: Get contact by Id
      operationId: getContact
      parameters:
        - name: contactId
          in: path
          description: contactId to be fetched
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
            application/xml:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Invalid ID supplied
        "404":
          description: Contact not found
        "405":
          description: Validation exception
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    delete:
      tags:
        - Contact
      summary: Deletes a contact
      description: delete a contact by Id
      operationId: deleteContact
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: contactId
          in: path
          description: Contact ID to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid Contact id
      security:
        - karygo_auth:
            - write:pets
            - read:pets
  /contact:
    post:
      tags:
        - Contact
      summary: Add a new contact to the Contact table
      description: Add a new contact
      operationId: addContact
      requestBody:
        description: Create a new contact in Contact table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
          application/xml:
            schema:
              $ref: "#/components/schemas/Contact"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Contact"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
            application/xml:
              schema:
                $ref: "#/components/schemas/Contact"
        "405":
          description: Invalid input
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    get:
      tags:
        - Contact
      summary: Get all contacts from contact table
      description: Get all contacts
      operationId: allContacts
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        "404":
          description: Page not found
      security:
        - karygo_auth:
            - write:contactsW
            - read:contactsR
  /items:
    get:
      tags:
        - Items
      summary: Get all items
      description: Get all itmes from item table
      operationId: getAllItems
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Invalid status value
      # # security:
      #   - karygo_auth:
      #       - write:contactW
      #       - read:contactR

    post:
      tags:
        - Items
      summary: Create new item
      description: Insert new item into Item table
      operationId: createItem
      requestBody:
        description: Create a new item in Item table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
          application/xml:
            schema:
              $ref: "#/components/schemas/Item"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Item"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: Invalid status value
      # # security:
      #   - karygo_auth:
      #       - write:contactW
      #       - read:contactR

  /items/{itemId}:
    get:
      tags:
        - Items
      summary: Find item by ID
      description: Returns a single Item
      operationId: getItemById
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
            application/xml:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - karygo_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - Items
      summary: Updates an item in the Item table
      description: ""
      operationId: updateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing item in Item table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
          application/xml:
            schema:
              $ref: "#/components/schemas/Contact"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Contact"
        required: true
      responses:
        "405":
          description: Invalid input
      # security:
      #   # - karygo_auth:
      #   #     - write:pets
      #   #     - read:pets
    delete:
      tags:
        - Items
      summary: Deletes an item
      description: delete an item from Item table
      operationId: deleteItem
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: itemId
          in: path
          description: Item id to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid item value
      # security:
      #   # - karygo_auth:
      #   #     - write:pets
      #   #     - read:pets
  /items/{userId}/send:
    get:
      tags:
        - Items
      summary: Get items sent by User
      description: Returns array of itemss
      operationId: getItemyId
      parameters:
        - name: userId
          in: path
          description: ID of user to qeury with
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
            application/xml:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid ID supplied
        "404":
          description: Page not found
      # # security:
      # #   - karygo_auth:
      # #       - write:pets
      #       - read:pets

  /items/{userId}/travel:
    get:
      tags:
        - Items
      summary: Get items transported by User
      description: Returns array of itemss
      operationId: getItemsTransportedByUser
      parameters:
        - name: userId
          in: path
          description: ID of user to query with
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
            application/xml:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid ID supplied
        "404":
          description: Page not found
      # # security:
      # #   - karygo_auth:
      # #       - write:pets
      #       - read:pets

  /user/{userId}:
    put:
      tags:
        - User
      summary: Update an existing user
      description: Update existing user by Id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: userId to be updated
          required: true
          explode: true
          schema:
            type: integer

      requestBody:
        description: Update an existing user in User table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: page not found
        "405":
          description: Validation exception
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    get:
      tags:
        - User
      summary: Get an existing user
      description: Get user by Id
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: userId to be fetched
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: page not found
        "405":
          description: Validation exception
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    delete:
      tags:
        - User
      summary: Deletes a user
      description: delete a user by Id
      operationId: deleteUser
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User ID to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid userId
      security:
        - karygo_auth:
            - write:userR
            - read:userW
  /user:
    post:
      tags:
        - User
      summary: Add a new user to the User table
      description: Add a new user
      operationId: addUser
      requestBody:
        description: Create a new user in User table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "405":
          description: Invalid input
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    get:
      tags:
        - User
      summary: Get all users from User table
      description: Get all users
      operationId: allUsers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: Page not found
      security:
        - karygo_auth:
            - write:contactsW
            - read:contactsR
  /trips:
    get:
      tags:
        - Trip
      summary: Get all Trips
      description: Get all trips from Trip table
      operationId: getAllTrips
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trip"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trip"
        "400":
          description: Invalid status value
      # # security:
      #   - karygo_auth:
      #       - write:contactW
      #       - read:contactR

    post:
      tags:
        - Trip
      summary: Create new trip
      description: Insert new trip into Trip table
      operationId: createTrip
      requestBody:
        description: Create a new trip in Trip table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trip"
          application/xml:
            schema:
              $ref: "#/components/schemas/Trip"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Trip"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Trip"
            application/xml:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Trip"
        "400":
          description: Invalid status value
      # # security:
      #   - karygo_auth:
      #       - write:contactW
      #       - read:contactR

  /trips/{tripId}:
    get:
      tags:
        - Trip
      summary: Find trip by ID
      description: Returns a single trip
      operationId: getTripById
      parameters:
        - name: tripId
          in: path
          description: ID of trip to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trip"
            application/xml:
              schema:
                $ref: "#/components/schemas/Trip"
        "400":
          description: Invalid ID supplied
        "404":
          description: Page not found
      # security:
      #   - karygo_auth:
      #       - write:tripW
      #       - read:tripR
    put:
      tags:
        - Trip
      summary: Updates a trip in the Trip table
      description: ""
      operationId: updateTrip
      parameters:
        - name: tripId
          in: path
          description: ID of trip that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing trip in Trip table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trip"
          application/xml:
            schema:
              $ref: "#/components/schemas/Trip"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Trip"
        required: true
      responses:
        "405":
          description: Invalid input
      # security:
      #   # - karygo_auth:
      #   #     - write:pets
      #   #     - read:pets
    delete:
      tags:
        - Trip
      summary: Deletes an Trip
      description: delete a trip from Trip table
      operationId: deleteTrip
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: tripId
          in: path
          description: Trip id to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid trip value
      # security:
      #   # - karygo_auth:
      #   #     - write:pets
      #   #     - read:pets
  /trips/{userId}/send:
    get:
      tags:
        - Trip
      summary: Get all trips made by User
      description: Returns array of trips
      operationId: getAllTripsById
      parameters:
        - name: userId
          in: path
          description: ID of user to qeury with
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trip"
            application/xml:
              schema:
                $ref: "#/components/schemas/Trip"
        "400":
          description: Invalid ID supplied
        "404":
          description: Page not found
      # # security:
      # #   - karygo_auth:
      # #       - write:pets
      #       - read:pets

  /trips/{userId}/complete:
    get:
      tags:
        - Trip
      summary: Get trips completed by User
      description: Returns array of trips completed by the user
      operationId: getTripsCompletedByUser
      parameters:
        - name: userId
          in: path
          description: ID of user to query with
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trip"
            application/xml:
              schema:
                $ref: "#/components/schemas/Trip"
        "400":
          description: Invalid ID supplied
        "404":
          description: Page not found
      # # security:
      # #   - karygo_auth:
      # #       - write:pets
      #       - read:pets
  /trips/{userId}/pending:
    get:
      tags:
        - Trip
      summary: Get trips pending by User
      description: Returns array of trips pending by the user
      operationId: getTripsPendingByUser
      parameters:
        - name: userId
          in: path
          description: ID of user to query with
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trip"
            application/xml:
              schema:
                $ref: "#/components/schemas/Trip"
        "400":
          description: Invalid ID supplied
        "404":
          description: Page not found
      # # security:
      # #   - karygo_auth:
      # #       - write:pets
      #       - read:pets

  /admin/{adminId}:
    put:
      tags:
        - Admin
      summary: Update an existing Admin
      description: Should ONLY be accessible when a admin has logged in
      operationId: updateAdmin
      parameters:
        - name: adminId
          in: path
          description: userId to be updated
          required: true
          explode: true
          schema:
            type: integer

      requestBody:
        description: Update an existing admin in Admin table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Admin"
          application/xml:
            schema:
              $ref: "#/components/schemas/Admin"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Admin"
        "400":
          description: Invalid ID supplied
        "404":
          description: page not found
        "405":
          description: Validation exception
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    get:
      tags:
        - Admin
      summary: Get an existing admin
      description: Get admin by Id
      operationId: getAdmin
      parameters:
        - name: adminId
          in: path
          description: adminId to be fetched
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Admin"
        "400":
          description: Invalid ID supplied
        "404":
          description: page not found
        "405":
          description: Validation exception
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    delete:
      tags:
        - Admin
      summary: Deletes an admin
      description: delete an admin by Id
      operationId: deleteAdmin
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: adminId
          in: path
          description: admin ID to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid adminId
      security:
        - karygo_auth:
            - write:userR
            - read:userW
  /admin:
    post:
      tags:
        - Admin
      summary: Add a new admin to the Admin table
      description: Add a new admin
      operationId: createAdmin
      requestBody:
        description: Create a new admin in Admin table
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Admin"
          application/xml:
            schema:
              $ref: "#/components/schemas/Admin"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Admin"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
            application/xml:
              schema:
                $ref: "#/components/schemas/Admin"
        "405":
          description: Invalid input
      security:
        - karygo_auth:
            - write:sample
            - read:sample
    get:
      tags:
        - Admin
      summary: Get all admins from Admin table
      description: Get all Admin
      operationId: allAdmin
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Admin"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Admin"
        "404":
          description: Page not found
      security:
        - karygo_auth:
            - write:contactsW
            - read:contactsR

  /admin/transaction:
    get:
      tags:
        - Admin
      summary: Get all transactions from Transaction table
      description: Get all Transactions
      operationId: allTransaction
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "404":
          description: Page not found
      security:
        - karygo_auth:
            - write:contactsW
            - read:contactsR

  /admin/transaction/{txId}:
    get:
      tags:
        - Admin
      summary: Get an existing transaction
      description: Get transaction by Id
      operationId: getTransaction
      parameters:
        - name: txId
          in: path
          description: transactionId to be fetched
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
            application/xml:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid ID supplied
        "404":
          description: page not found
        "405":
          description: Validation exception
      security:
        - karygo_auth:
            - write:sample
            - read:sample

components:
  schemas:
    Transaction:
      type: object
      required:
        - id
        - travelerId
        - senderId
        - itemId
        - tripId
      properties:
        ID:
          type: integer
          format: int64
          example: 10
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        travelerId:
          type: integer
          format: int64
          example: 198772
        senderId:
          type: integer
          format: int64
          example: 57789
        itemId:
          type: integer
          format: int64
        tripId:
          type: integer
          example: 34556
        successCode:
          type: string
          example: "YT9965458YZ"
        status:
          type: string
          example: completed
          enum:
            - completed
            - pending
            - canceled
        complete:
          type: boolean
      xml:
        name: transaction
    Lga:
      type: object
      properties:
        ID:
          type: integer
          format: int64
          example: 100000
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        name:
          type: string
          example: "Eti-Osa"
        stateId:
          type: integer
          example: 10
        state:
          type: object
          items:
            $ref: "#/components/schemas/State"
      xml:
        name: lga
    State:
      type: object
      properties:
        id:
          type: integer
          example: 10
        name:
          type: string
          example: "Lagos"
      xml:
        name: state
    Image:
      type: object
      properties:
        ID:
          type: integer
          format: int64
          example: 10
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        title:
          type: string
        altText:
          type: string
        url:
          type: string
          example: "image/image.jpg"
    Item:
      type: object
      properties:
        ID:
          type: integer
          format: int64
          example: 10
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        senderId:
          type: integer
          format: int64
          example: 134
        name:
          type: string
          example: "Clothes"
        itemImageId:
          type: integer
          format: int64
          example: 10
        start:
          type: string
        end:
          type: string
        dateRange:
          type: string
        preferedMeansOftransport:
          type: string
          example: "Flight"
        receiverName:
          type: string
          example: "Michael Oscar"
        receiverPhone:
          type: string
          example: "2348177465577"
        receiverImageId:
          type: integer
          format: int64
          example: 984958
        quantity:
          type: integer
          format: int64
          example: 20
        itemImage:
          type: object
          items:
            $ref: "#/components/schemas/Image"
        receiverImage:
          type: object
          items:
            $ref: "#/components/schemas/Image"
      xml:
        name: Item

    Admin:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        firstName:
          type: string
          example: "john"
        lastName:
          type: string
          example: "doe"
        email:
          type: string
          example: "johndoe@gmail.com"
        phone:
          type: string
          example: "2340033335566"
        adminType:
          type: string
          example: moderator
          enum:
            - superUser
            - moderator
            - user
        jobTitle:
          type: string
        department:
          type: string

    User:
      type: object
      properties:
        ID:
          type: integer
          format: int64
          example: 10
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        firstName:
          type: string
          example: "John"
        middeName:
          type: string
          example: "doe"
        lastName:
          type: string
          example: "James"
        email:
          type: string
          example: johndoe@email.com
        password:
          type: string
          example: "12345"
        address:
          type: string
          example: "21st street, NY, USA."
        gender:
          type: string
          example: "Male"
        lgaId:
          type: integer
          format: int64
          example: 10
        lga:
          type: object
          items:
            $ref: "#/components/schemas/Lga"
      xml:
        name: user
    Trip:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        departureState:
          type: string
          example: "Kano"
        departureLocation:
          type: string
        departureTime:
          type: string
        arrivalState:
          type: string
        arrivalLocation:
          type: string
        meansOfTransportation:
          type: string
        travelerId:
          type: integer
          format: int64
      xml:
        name: tag
    Contact:
      required:
        - name
        - email
        - phone
      type: object
      properties:
        ID:
          type: integer
          format: int64
          example: 10
        CreatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        UpdatedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        DeletedAt:
          type: string
          example: "0001-01-01T00:00:00Z"
        name:
          type: string
          example: "Ikechwukwu Chukwu"
        email:
          type: string
          example: "lipsum@gmail.com"
        phone:
          type: string
          example: +2348098899824
        message:
          type: string
          example: "Welcome to karygo"

      xml:
        name: contact
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Contact:
      description: contact object that needs to be added to the Contact table
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Contact"
        application/xml:
          schema:
            $ref: "#/components/schemas/Contact"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    karygo_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://karygo.sample.io/oauth/authorize
          scopes:
            write: modify data in the table
            read: read data in the table
    api_key:
      type: apiKey
      name: api_key
      in: header
